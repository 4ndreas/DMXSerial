# This is a basic workflow to help you get started with Actions for Arduino library projects

name: Arduino Library Checks

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  push:
    branches: [develop,master]
  pull_request:
    branches: [develop,master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  # This defines a job for checking the Arduino library format specifications
  # see <https://github.com/marketplace/actions/arduino-arduino-lint-action>
  lint:
    name: check library format
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Arduino - lint
      - name: Arduino-lint
        uses: arduino/arduino-lint-action@v1
        with:
          library-manager: update
          verbose: false

  # 
  checks:
    name: 
    runs-on: ubuntu-latest

    strategy:
      matrix:
        fqbn:
          - arduino:avr:uno
          - arduino:avr:leonardo
          - arduino:avr:mega
          - arduino:megaavr:nona4809:mode=off

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Compile Examples for UNO
      - name: Compile examples on various processors
        uses: arduino/compile-sketches@v1
        with:
          verbose: true
          fqbn: ${{ matrix.fqbn }}
          sketch-paths: |
            - 'examples/DMXSerialFlow'
            # - 'examples/DmxSerialNeoPixels'
            - 'examples/DmxSerialRecv'
            - 'examples/DmxSerialSend'
            # - 'examples/DmxSniff'

